
name: Publish Docker Image

on:
  push:
    tags:
      - 'v*'
  repository_dispatch:
    types: [publish-docker]

jobs:
  push_to_registry:
    name: Push Docker image to Docker hub
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v5

      - name: Download release JAR
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: ${{ github.repository }}
          version: tags/${{ github.event.client_payload.tag }}
          regex: true
          file: ".*\\.jar$"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: wadetyler/corsairops-user-service
          tags: |
            # When triggered by an actual tag push
            type=ref,event=tag
            # When triggered manually with a version payload
            type=raw,value=${{ github.event.client_payload.tag }}
            # Always push "latest"
            type=raw,value=latest

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: index.docker.io/wadetyler/corsairops-user-service
          subject-digest: ${{ steps.build-and-push.outputs.digest }}
          push-to-registry: true

      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v4
        with:
          token: ${{ secrets.K8S_REPO_PAT }}
          repository: 'CorsairOps/k8s'
          event-type: reboot-user-service